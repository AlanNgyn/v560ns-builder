name: Build and upload apk & ipa for internal test

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Build Branch"
        required: true
        default: "develop"
      environment:
        description: "Select environment (staging or live)"
        required: true
        default: "staging"

jobs:
  ios-adhoc:
    name: iOS AdHoc Build
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Create fastlane keychain
        run: |
          security create-keychain -p "" fastlane.keychain
          security default-keychain -s fastlane.keychain
          security unlock-keychain -p "" fastlane.keychain

      - name: Setup SSH for private repo
        run: |
          mkdir -p ~/.ssh
          cat << 'EOF' > ~/.ssh/id_rsa
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 2222 ${{ secrets.PRIVATE_HOST }} >> ~/.ssh/known_hosts
          printf "Host %s\n  HostName %s\n  Port 2222\n  IdentityFile ~/.ssh/id_rsa\n" \
            "${{ secrets.PRIVATE_HOST }}" "${{ secrets.PRIVATE_HOST }}" > ~/.ssh/config
            
      # Checkout the actual application code
      - name: Checkout real code
        run: |
          git clone --branch ${{ github.event.inputs.branch }} --single-branch \
            ${{ secrets.PRIVATE_REPO_FULL_NAME }} real-code

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            real-code/node_modules
            ~/.cache/yarn
          key: yarn-${{ hashFiles('real-code/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install JS dependencies
        shell: bash
        run: yarn --cwd real-code install --silent

      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4.4"
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: real-code/fastlane/vendor/bundle
          key: ${{ runner.os }}-gem-cache-${{ hashFiles('real-code/fastlane/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-cache-
      - name: Install Bundler
        working-directory: real-code/fastlane
        run: |
          gem install bundler
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            real-code/ios/Pods
            ~/.cocoapods/repos
          key: ${{ runner.os }}-pods-${{ hashFiles('real-code/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: iOS Pod install
        working-directory: real-code/ios
        run: pod install --repo-update --silent

      - name: Build & AdHoc via Fastlane
        working-directory: real-code/fastlane
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID_STAGING: ${{ secrets.BUNDLE_ID_STAGING }}
          BUNDLE_ID_LIVE: ${{ secrets.BUNDLE_ID_LIVE }}
          DIAWI_API_TOKEN: ${{ secrets.DIAWI_API_TOKEN }}
          GG_DRIVE_FOLDER_ID: ${{ secrets.GG_DRIVE_FOLDER_ID }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          BUILD_BRANCH: ${{ github.event.inputs.branch }}
          DRIVER_KEY_JSON: ${{ secrets.DRIVER_KEY_JSON }}
          FASTLANE_DISABLE_UPDATE_CHECK: true
        run: bundle exec fastlane ios adhoc env:${{ github.event.inputs.environment }}

      - name: Upload Gym log as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gym-log
          path: "/Users/runner/Library/Logs/gym/TemoorstAppDevelopment-TemoorstApp Development Release.log"

      - name: Notify on failure
        if: failure()
        run: |
          ERROR_MSG="Build failed in job ${{ github.job }} on ref ${{ github.ref }} (run #${{ github.run_number }})"
          # replace the curl command below with your notification endpoint
          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"project\":\"${{ secrets.PROJECT_NAME }}\" ,\"message\":\"${ERROR_MSG}\", \"status\": 1 , \"link\": \"\" }" \
            "${{ secrets.NOTIFICATION_WEBHOOK_URL }}"

  # build-apk:
    name: Android build APK
    runs-on: ubuntu-latest
    steps:
      - *setup-ssh
      - *checkout-real-code
      - *cache-yarn
      - *install-js

      - name: Build APK via Fastlane
        working-directory: real-code/fastlane
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID_STAGING: ${{ secrets.BUNDLE_ID_STAGING }}
          BUNDLE_ID_LIVE: ${{ secrets.BUNDLE_ID_LIVE }}
          DIAWI_API_TOKEN: ${{ secrets.DIAWI_API_TOKEN }}
          GG_DRIVE_FOLDER_ID: ${{ secrets.GG_DRIVE_FOLDER_ID }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          BUILD_BRANCH: ${{ github.event.inputs.branch }}
          DRIVER_KEY_JSON: ${{ secrets.DRIVER_KEY_JSON }}
          FASTLANE_DISABLE_UPDATE_CHECK: true
        run: bundle exec fastlane android apk env:${{ github.event.inputs.environment }}

      - *notify-on-failure
